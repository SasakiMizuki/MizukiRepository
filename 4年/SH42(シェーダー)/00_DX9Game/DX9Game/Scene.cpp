//=======================================================================================
//
//	  ゲームシーン クラス
//
//=======================================================================================
#define _CRT_SECURE_NO_WARNINGS
#define _CRT_NON_CONFORMING_SWPRINTFS
#include <windows.h>
#include <tchar.h>
#include <stdio.h>
#include "define.h"
#include "Scene.h"
#include "Input.h"

//---------------------------------------------------------------------------------------
// コンストラクタ
//---------------------------------------------------------------------------------------
CScene::CScene()
{
	m_FPS = 0;
}

//---------------------------------------------------------------------------------------
// デストラクタ
//---------------------------------------------------------------------------------------
CScene::~CScene()
{
}

//---------------------------------------------------------------------------------------
// シーン生成
//---------------------------------------------------------------------------------------
CScene* CScene::Create(CGraphics* pGraph)
{
	CScene* pScene = new CScene();
	if (pScene) {
		if (!pScene->Initialize(pGraph)) {
			SAFE_DELETE(pScene);
		}
	}
	return pScene;
}

//---------------------------------------------------------------------------------------
// デバイス、リソース初期化
//---------------------------------------------------------------------------------------
bool CScene::Initialize(CGraphics* pGraph)
{
	m_pGraph = pGraph;
	m_target.Init();
	//-------- ゲーム用オブジェクトの初期化
	if (!m_mesh.Initialize(_T("../data/model/1号_v1.00.X"))) {
		::MessageBox(NULL, _T("Xファイルが読めません."), _T("error"), MB_OK);
		return false;
	}
	D3DXMatrixIdentity(&m_world);

	m_shader.Load(_T("../data/shader/Toon.fx"));

	return true;
}

//---------------------------------------------------------------------------------------
// デバイス、リソース解放
//---------------------------------------------------------------------------------------
void CScene::Finalize()
{
	//-------- ゲーム用オブジェクトの後始末
	m_shader.Release();
	m_mesh.Finalize();
}

//---------------------------------------------------------------------------------------
// シーン解放
//---------------------------------------------------------------------------------------
void CScene::Release()
{
	Finalize();
	delete this;
}

//---------------------------------------------------------------------------------------
// ゲーム描画処理（メインループからコールされる）
//---------------------------------------------------------------------------------------
void CScene::Render()
{
	if (m_pGraph->Begin()) {	// 描画開始

		Draw();					// 描画処理

		m_pGraph->End();		// 描画終了
	}
	m_pGraph->SwapBuffer();		// バックバッファ入替
}

//---------------------------------------------------------------------------------------
// ゲームメイン処理（メインループからコールされる）
//---------------------------------------------------------------------------------------
void CScene::Update()
{
	// 入力更新
	CInput::Update();

	//----- ここにゲーム本体処理
	m_angle.y -= 0.0f;
	if (m_angle.y < -180.0f)
		m_angle.y += 360.0f;
	D3DXMatrixRotationYawPitchRoll(&m_world,
		D3DXToRadian(m_angle.y), D3DXToRadian(m_angle.x),
		D3DXToRadian(m_angle.z));
	
}

//---------------------------------------------------------------------------------------
// 描画処理（CGraphics::Render() からコールされる）
//---------------------------------------------------------------------------------------
void CScene::Draw()
{
	m_szDebug[0] = _T('\0');	// デバッグ文字列初期化

	// FPS を画面に描画するための文字列を作成
	TCHAR	str[256];
	_stprintf(str, _T("FPS = %d\n"), m_FPS);
	lstrcat(m_szDebug, str);

	//----- ここに描画処理
	m_shader.SetCamera(&m_pGraph->GetCameraPos());
	m_shader.SetViewMatrix(&m_pGraph->GetViewMatrix());
	m_shader.SetProjMatrix(&m_pGraph->GetProjMatrix());
	m_shader.SetLight(&m_pGraph->GetLight());
	D3DXMatrixIdentity(&m_world);
	m_mesh.Draw(m_world, &m_shader);

	// デバッグ文字列描画
	m_pGraph->DrawText(0, 0, m_szDebug);
}

//=======================================================================================
//	End of File
//=======================================================================================